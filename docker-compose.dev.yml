version: '3.8'

services:
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_DB: audiostack
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - '5433:5432'
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - audiostack-network

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - audiostack-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    depends_on:
      - db
      - redis
    environment:
      DATABASE_URL: postgres://postgres:password@db:5432/audiostack?schema=public
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ''
      REDIS_TLS_ENABLED: 'false'
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      REFRESH_TOKEN_SECRET: your-super-secret-refresh-token-key-change-this-in-production
      JWT_EXPIRES_IN: 15m
      UPLOAD_DIR: uploads
      MAX_FILE_SIZE: 104857600
      DEFAULT_ADMIN_USERNAME: admin
      DEFAULT_ADMIN_PASSWORD: admin123
      NODE_ENV: development
      PORT: 5000
      FRONTEND_URL: http://localhost:3000
    ports:
      - '5001:5000'
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/uploads:/app/uploads
    command:
      [
        'sh',
        '-c',
        'npx prisma generate && npx prisma migrate deploy && npx prisma db push && npx nodemon src/index.ts',
      ]
    networks:
      - audiostack-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    depends_on:
      - backend
    ports:
      - '3000:3000'
    environment:
      NODE_ENV: development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - audiostack-network

volumes:
  db_data:
  redis_data:

networks:
  audiostack-network:
    driver: bridge
